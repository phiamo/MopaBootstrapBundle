{% extends 'form_div_layout.html.twig' %}
{% from 'MopaBootstrapBundle::flash.html.twig' import flash %}

{# Widgets #}

{% block form_widget_simple %}
{% spaceless %}
    {% set type = type|default('text') %}
    {% if type != 'hidden' and widget_addon.type|default(null) is not null %}
    <div class="input-{{ widget_addon.type }}">
        {% if widget_addon.type == 'prepend' %}
        {{ block('widget_addon') }}
        {% endif %}
    {% endif %}
    {% if not widget_remove_btn|default(null) %}
        {% set attr = attr|merge({'class': attr.class|default('') ~ ' not-removable'}) %}
    {% endif %}
    <input type="{{ type }}" {{ block('widget_attributes') }} {% if value is not empty %}value="{{ value }}" {% endif %}/>
    {% if type != 'hidden' and  widget_addon.type|default(null) is not null %}
        {% if widget_addon.type == 'append' %}
        {{ block('widget_addon') }}
        {% endif %}
    </div>
    {% endif %}
{% endspaceless %}
{% endblock form_widget_simple %}

{% block form_widget_compound %}
{% spaceless %}
    {% if not form.hasParent() %}
        {% if render_fieldset %}<fieldset>{% endif %}
        {% if show_legend %}{{ block('form_legend') }}{% endif %}
    {% endif %}
    {{ block('form_rows_visible') }}
    {{ form_rest(form) }}
    {% if not form.hasParent() %}
        {% if render_fieldset %}</fieldset>{% endif %}
    {% endif %}
{% endspaceless %}
{% endblock form_widget_compound %}

{% block collection_widget %}
{% spaceless %}
    {{ block('form_widget') }}
{% endspaceless %}
{% endblock collection_widget %}

{% block choice_widget_expanded %}
{% spaceless %}
    <div {{ block('widget_container_attributes') }}>
    {% for child in form %}
        <label class="{{ (multiple ? 'checkbox' : 'radio') ~ (widget_type ? ' ' ~ widget_type : '') ~ (inline is defined and inline ? ' inline' : '') }}">
            {{ form_widget(child, {'attr': {'class': attr.widget_class|default('')}}) }}
            {{ child.vars.label|trans({}, translation_domain) }}
        </label>
    {% endfor %}
    </div>
{% endspaceless %}
{% endblock choice_widget_expanded %}

{% block checkbox_widget %}
{% spaceless %}
{% if form.hasParent() and 'choice' not in form.parent.vars.block_prefixes %}
    <label class="checkbox{% if inline is defined and inline %} inline{% endif %}">
{% endif %}
        <input type="checkbox" {{ block('widget_attributes') }}{% if value is defined %} value="{{ value }}"{% endif %}{% if checked %} checked="checked"{% endif %}> {{ help_inline|trans({}, translation_domain)|raw }}
{% if form.hasParent() and 'choice' not in form.parent.vars.block_prefixes %}
        {{ label|trans({}, translation_domain) }}
        {% set help_inline = false %}
    </label>
{% endif %}
{% endspaceless %}
{% endblock checkbox_widget %}

{% block date_widget %}
{% spaceless %}
{% if widget == 'single_text' %}
    {{ block('form_widget_simple') }}
{% else %}
        {% set attr = attr|merge({'class': attr.class|default('inline')}) %}
            {{ date_pattern|replace({
                '{{ year }}':  form_widget(form.year, {'attr': {'class': attr.widget_class|default('') ~ ' input-small'}}),
                '{{ month }}': form_widget(form.month, {'attr': {'class': attr.widget_class|default('') ~ ' input-mini'}}),
                '{{ day }}':   form_widget(form.day, {'attr': {'class': attr.widget_class|default('') ~ ' input-mini'}}),
            })|raw }}
        {{ block('help') }}
{% endif %}
{% endspaceless %}
{% endblock date_widget %}

{% block time_widget %}
{% spaceless %}
    {% if widget == 'single_text' %}
        {{ block('form_widget_simple') }}
    {% else %}
        {% set attr = attr|merge({'class': attr.class|default('')}) %}
        <div {{ block('widget_container_attributes')  }}>
            {{ form_widget(form.hour, { 'attr': {  'size': '1', 'class': 'input-mini' } }) }}:{{ form_widget(form.minute, { 'attr': { 'size': '1', 'class': 'input-mini' } }) }}{% if with_seconds %}:{{ form_widget(form.second, { 'attr': { 'size': '1', 'class': 'input-mini' } }) }}{% endif %}
        </div>
        {{ block('help') }}
    {% endif %}
{% endspaceless %}
{% endblock time_widget %}

{% block datetime_widget %}
{% spaceless %}
    {% if widget == 'single_text' %}
        {{ block('form_widget_simple') }}
    {% else %}
            {% set attr = attr|merge({'class': attr.class|default('')}) %}
            <div {{ block('widget_container_attributes') }}>
                {{ form_errors(form.date) }}
                {{ form_errors(form.time) }}
                {{ form_widget(form.date, {'attr': {'class': attr.widget_class|default('')}}) }}
                {{ form_widget(form.time, {'attr': {'class': attr.widget_class|default('')}}) }}
            </div>
    {% endif %}
{% endspaceless %}
{% endblock datetime_widget %}

{% block percent_widget %}
{% spaceless %}
    {% set widget_addon = widget_addon|merge({'text': widget_addon.text|default('%')}) %}
    {{ block('form_widget_simple') }}
{% endspaceless %}
{% endblock percent_widget %}

{% block money_widget %}
{% spaceless %}
    {% set widget_addon = widget_addon|merge({'text': money_pattern|replace({ '{{ widget }}': ''})}) %}
    {{ block('form_widget_simple') }}
{% endspaceless %}
{% endblock money_widget %}

{# Labels #}

{% block form_legend %}
{% spaceless %}
    {% if label is empty %}
        {% set label = name|humanize %}
    {% endif %}
    <legend>{{ label|trans({}, translation_domain) }}</legend>
    {% if widget_add_btn %}
        {{ block('form_widget_add_btn') }}
    {% endif %}
{% endspaceless %}
{% endblock form_legend %}

{% block form_label %}
{% spaceless %}
    {% if label is empty %}
        {% set label = name|humanize %}
    {% endif %}
    {% if not compound %}
        {% set label_attr = label_attr|merge({'for': id}) %}
    {% endif %}
    {% if required %}
        {% set label_attr = label_attr|merge({'class': label_attr.class|default('') ~ ' required'}) %}
    {% endif %}
    {% set label_attr = label_attr|merge({'class': label_attr.class|default('') ~ ' control-label'}) %}
    <label{% for attrname,attrvalue in label_attr %} {{attrname}}="{{attrvalue}}"{% endfor %}>
    {{ label|trans({}, translation_domain) }}
    {{ block('label_asterisk') }}
    {% if widget_add_btn %}
        {{ block('form_widget_add_btn') }}
    {% endif %}
    {% if help_label %}
        <p class="help-block">{{ help_label|trans({}, translation_domain) }}</p>
    {% endif %}
    </label>
{% endspaceless %}
{% endblock form_label %}

{# Rows #}

{% block form_rows_visible %}
{% spaceless %}
    {% if form_errors(form) %}
        <div class="symfony-form-errors">
            {{ form_errors(form) }}
        </div>
    {% endif %}
    {% for child in form %}
        {% if 'hidden' not in child.vars.block_prefixes %}
            {% if 'collection' in form.vars.block_prefixes and not omit_collection_item %}
            <div class="collection-item">
            {% endif %}
            {{ form_row(child) }}
            {% if 'collection' in form.vars.block_prefixes and not omit_collection_item %}
            </div>
            {% endif %}
        {% endif %}
    {% endfor %}
{% endspaceless %}
{% endblock form_rows_visible %}

{% block form_row %}
{% spaceless %}
    {% set attr = attr|merge({'class': attr.class|default('') ~ (errors|length > 0 ? ' error' : '') }) %}
    {{ block('widget_control_group_start') }}
    {{ widget_prefix|raw }} {{ form_widget(form, _context) }} {{ widget_suffix|raw }}
    {% if widget_remove_btn is defined %}
        {{ block('form_widget_remove_btn') }}
    {% endif -%}
    {{ block('form_message') }}
    {{ block('widget_control_group_end') }}
{% endspaceless %}
{% endblock form_row %}

{# Support #}

{% block form_message %}
{% spaceless %}
    {{ form_errors(form) }}
    {{ block('form_help') }}
{% endspaceless %}
{% endblock form_message %}

{# Help #}

{% block form_help %}
{% spaceless %}
{% if 'checkbox' not in form.vars.block_prefixes %}{# checkbox widget/choice widget problem see https://github.com/phiamo/MopaBootstrapBundle/commit/67406a16b38e5b622fffdd5b9c8a8707ca73f493#commitcomment-1295951 # #}
    {% if help_inline %}<p class="help-inline">{{ help_inline|trans({}, translation_domain)|raw }}</p>{%endif %}
{% endif %}
{% if help_block %}<p class="help-block">{{ help_block|trans({}, translation_domain)|raw }}</p>{%endif %}
{% endspaceless %}
{% endblock form_help %}

{% block form_widget_add_btn %}
{% spaceless %}
    {% if widget_add_btn %}
    {% set button_type = 'add' %}
    {% set button_values = widget_add_btn %}
    {{ block('collection_button') }}
    {% endif %}
{% endspaceless %}
{% endblock form_widget_add_btn %}

{% block form_widget_remove_btn %}
{% spaceless %}
    {% if widget_remove_btn %}
    {% set button_type = 'remove' %}
    {% set button_values = widget_remove_btn %}
    {{ block('collection_button') }}
    {% endif %}
{% endspaceless %}
{% endblock form_widget_remove_btn %}

{% block collection_button %}
<a {% for attrname,attrvalue in button_values.attr %} {{attrname}}="{{attrvalue}}"{% endfor %} data-collection-{{ button_type }}-btn="#{{ form.vars['id'] }}_control_group">
{% if button_values.icon is defined %}
<i class="icon-{{ button_values.icon }} {% if button_values.icon_color is defined %}icon-{{ button_values.icon_color }}{% endif %}"></i>
{% endif %}
{{ button_values.label }}
</a>

{% endblock collection_button %}

{% block label_asterisk %}
{% if required %}
    {% if render_required_asterisk %}*{% endif %}
{% else %}
    {% if render_optional_text %}<span class="optional">{{ "(optional)"|trans({}, translation_domain) }}</span>{% endif %}
{% endif %}
{% endblock label_asterisk %}

{% block widget_addon %}
{% spaceless %}
{# prevent deep nesting wrong context copy error #}
{% from 'MopaBootstrapBundle::icons.html.twig' import icon %}
<span class="add-on">{{ (widget_addon.text|default(false) ? widget_addon.text : icon(widget_addon.icon))|raw  }}</span>
{% endspaceless %}
{% endblock widget_addon %}

{# Errors #}

{% block form_errors %}
{% spaceless %}
{% if error_delay %}
    {% for child in form %}
        {% if loop.index == 1 %}
            {% if child.set('errors', errors) %}{% endif %}
        {% endif %}
    {% endfor %}
{% else %}
    {# prevent deep nesting wrong context copy error #}
    {% from 'MopaBootstrapBundle::flash.html.twig' import flash %}
    {% for error in errors %}
        {{
            flash(
                'error',
                error.messagePluralization is null
                    ? error.messageTemplate|trans(error.messageParameters, 'validators')
                    : error.messageTemplate|transchoice(error.messagePluralization, error.messageParameters, 'validators')
            )
        }}
    {% endfor %}
{% endif %}
{% endspaceless %}
{% endblock form_errors %}

{% block field_errors %}
{% spaceless %}
    {% if errors|length > 0 %}
    <span class="help-{{ block('error_type') }}">
            {% for error in errors %}
                {{
                    error.messagePluralization is null
                        ? error.messageTemplate|trans(error.messageParameters, 'validators')
                        : error.messageTemplate|transchoice(error.messagePluralization, error.messageParameters, 'validators')
                }} <br>
            {% endfor %}
    </span>
    {% endif %}
{% endspaceless %}
{% endblock field_errors %}

{# used to determine which type of error #}

{% block error_type %}
{% spaceless %}
{% if error_type %}
    {{ error_type }}
{% elseif form.hasParent() != 0 %}
    {% set form = form.parent %}
    {{ block('error_type') }}
{% elseif form.hasParent() == 0 %}
    {{ form.vars.error_type | default('inline') }}
{% endif %}
{% endspaceless %}
{% endblock error_type %}

{# widget helper blocks #}

{% block widget_control_group_start %}
{% spaceless %}
{% if widget_control_group|default(false) or not form.hasParent() %}
    {% if prototype is defined %}
        {% set data_prototype = '<div class="collection-item">' ~ form_row(prototype) ~ '</div>' %}
        {% set widget_control_group_attr = widget_control_group_attr|merge({'data-prototype': data_prototype}) %}
    {% endif %}
    {% set widget_control_group_attr = widget_control_group_attr|merge({'id': id ~ '_control_group', 'class': widget_control_group_attr.class|default('') ~ ' control-group'}) %}
    {% if errors|length > 0 %}
        {% set widget_control_group_attr = widget_control_group_attr|merge({'class': widget_control_group_attr.class|default('') ~ ' error'}) %}
    {% endif %}
    <div {% for attrname,attrvalue in widget_control_group_attr %} {{attrname}}="{{attrvalue}}"{% endfor %}>
    {# a form item containing the field in block_prefixes is a near subform or a field directly #}
    {% if (form.hasChildren() and form.hasParent())
        and 'field' not in form.vars.block_prefixes %}
        {% if show_child_legend%}
            {{ block('form_legend') }}
        {% endif %}
    {% else %}
        {% if label_render %}
            {{ form_label(form, label|default(null)) }}
        {% endif %}
    {% endif %}
    {% if widget_controls|default(false) or not form.hasParent() %}
        {% set widget_controls_attr = widget_controls_attr|merge({'class': widget_controls_attr.class|default('') ~ ' controls'}) %}
        <div {% for attrname,attrvalue in widget_controls_attr %}{{attrname}}="{{attrvalue}}" {% endfor %}>
    {% endif %}
{% endif %}
{% endspaceless %}
{% endblock widget_control_group_start %}

{% block widget_control_group_end %}
{% spaceless %}
{% if widget_control_group|default(false) or not form.hasParent() %}
    {% if widget_controls|default(false) or not form.hasParent() %}
        </div>
    {% endif %}
    </div>
{% endif %}
{% endspaceless %}
{% endblock widget_control_group_end %}
